{"version":3,"sources":["mine.svg","flag.svg","game/minesweeper-game.ts","App.tsx","MinesweeperBoard.tsx","serviceWorker.ts","index.tsx","App.module.css","MinesweeperBoard.module.css"],"names":["module","exports","GameStatus","Marker","CoveredCellState","Record","kind","marker","undefined","ExposedCellState","exploded","numMinesNearby","Cell","hasMine","state","makeCellRecord","cell","isExposed","set","GameState","cells","List","numRows","numColumns","numMines","minesAllocated","isIterableCells","object","Symbol","iterator","CommandType","MinesweeperGame","isRecord","this","size","Error","map","c","reduce","n","of","_","fill","Array","toJSON","row","column","dr","dc","filter","r","neighborCoords","cellState","oldCell","noMineIndexes","concat","getIndex","potentialMineLocations","difference","range","mineLocations","Set","sampleSize","i","has","merge","clearCell","newCell","getClearedCellState","setCell","neighbors","Mine","length","indexesToClear","indexToCoord","index","Math","floor","newCells","withMutations","values","next","value","delete","get","coord","add","setIn","validateCoord","status","stats","countBy","toArray","cleared","mine","covered","Lose","Win","InProgress","numExploded","numMarkedMines","event","ctrlKey","props","handleCellClick","preventDefault","content","cssClasses","styles","msg","push","cellExploded","src","mine_icon","alt","cellExposed","num","flag_icon","Maybe","className","join","onClick","onContextMenu","onRightClick","React","PureComponent","MinesweeperBoard","key","game","rows","rowNum","colNum","renderCell","boardRow","board","App","history","bind","command","Clear","button","MarkMine","altKey","MarkMaybe","setState","gameInfo","newGame","ClearNeighbors","clearNeighbors","markCell","slice","field","converter","String","target","statusMsg","info","app","name","gameConfig","htmlFor","type","numberInput","onChange","linkStateHandler","Number","id","style","marginBottom","marginLeft","undoMove","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c154259a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mine.28570de7.svg\";","module.exports = __webpack_public_path__ + \"static/media/flag.b32b01e6.svg\";","/*\nMinesweeper game state representation.  The MinesweeperGame class is immutable.  Methods which modify the state\nreturn a new instance.\n\nEssentially, the game state consists of an array of rows * columns cells.\n\nEach cell has an attribute which specifies whether the cell contains a mine, but this attribute is not visible to a\nplayer until the cell is exposed.\n\nAt any given time, a cell is either hidden or exposed.\n\nHidden cells can have the following markers applied to them:\n* Mine: the cell is marked as containing a mine\n* Maybe: the cell is marked as maybe containing a mine\n\nExposed cells can be in the following states:\n* Clear: does not contain a mine\n* Exploded: contains an exploded mine.\n */\n\nimport {List, Record, RecordOf} from 'immutable'\nimport _ from 'lodash'\n\ntype Coord = [number, number];\n\nexport enum GameStatus {\n    Win,\n    Lose,\n    InProgress\n}\n\nexport enum Marker {\n    Mine,\n    Maybe\n}\n\nexport interface CoveredCellState {\n    kind: 'covered'\n    marker?: Marker\n}\n\nexport interface ExposedCellState {\n    kind: 'exposed'\n    exploded: boolean\n    numMinesNearby: number\n}\n\nexport interface GameInfo {\n    numMines: number\n    numMarkedMines: number\n    numExploded: number\n    status: GameStatus\n}\n\nexport type CellState = CoveredCellState | ExposedCellState\n\nexport interface Cell {\n    hasMine: boolean\n    state: CellState\n}\n\nconst CoveredCellState = Record<CoveredCellState>({kind: 'covered', marker: undefined});\nconst ExposedCellState = Record<ExposedCellState>({\n    kind: 'exposed',\n    exploded: false,\n    numMinesNearby: 0\n});\nconst Cell = Record<Cell>({hasMine: false, state: CoveredCellState()});\n\n/**\n * Ensures that a cell is composed of Records\n * @param cell\n */\nfunction makeCellRecord(cell: Cell): RecordOf<Cell> {\n    const state = isExposed(cell.state) ? ExposedCellState(cell.state) : CoveredCellState(cell.state);\n    return Cell(cell).set('state', state)\n}\n\nexport function isExposed(state: CellState): state is ExposedCellState {\n    return state.kind === 'exposed'\n}\n\ninterface GameStateFields {\n    // cells stored in row-major order\n    cells: List<RecordOf<Cell>>\n    numRows: number\n    numColumns: number\n    numMines: number\n    minesAllocated: boolean\n}\n\nconst GameState = Record<GameStateFields>({\n    cells: List<RecordOf<Cell>>(),\n    numRows: 0,\n    numColumns: 0,\n    numMines: 0,\n    minesAllocated: false\n});\n\ntype GameState = RecordOf<GameStateFields>;\n\nfunction isIterableCells(object: any): object is Iterable<Cell> {\n    return typeof object?.[Symbol.iterator] === 'function'\n}\n\nexport class MinesweeperGame {\n    private readonly state: GameState;\n\n    constructor(numRows: number, numColumns: number);\n    constructor(numRows: number, numColumns: number, cells: Iterable<Cell>);\n    constructor(numRows: number, numColumns: number, numMines: number);\n    constructor(gameState: GameState);\n    constructor(...args: any) {\n        if (Record.isRecord(args[0])) {\n            this.state = args[0] as GameState\n        } else {\n            const numRows = args[0] as number;\n            const numColumns = args[1] as number;\n            if (isIterableCells(args[2])) {\n                const cells = List<Cell>(args[2]);\n                if (cells.size !== numRows * numColumns) {\n                    throw Error('Length of cells must be numRows * numColumns')\n                }\n                this.state = GameState({\n                    cells: cells.map(c => makeCellRecord(c)),\n                    numRows,\n                    numColumns,\n                    numMines: cells.reduce((n, cell) => cell.hasMine ? n + 1 : n, 0),\n                    minesAllocated: true\n                })\n            } else {\n                const numMines: number = args[2] ?? 0;\n                const cells = List.of(..._.fill(Array(numRows * numColumns), Cell()));\n                this.state = GameState({cells, numRows, numColumns, numMines})\n            }\n        }\n    }\n\n    get numRows() {\n        return this.state.numRows\n    }\n\n    get numColumns() {\n        return this.state.numColumns\n    }\n\n    get numExposed(): number {\n        return this.state.cells.reduce((n, cell) => isExposed(cell.state) ? n + 1 : n, 0)\n    }\n\n    get gameInfo(): GameInfo {\n        // categorize cells into exploded, cleared, mine, and covered, and count occurrences\n        let stats = _.countBy(this.state.cells.toArray(), cell => {\n            if (isExposed(cell.state)) {\n                return cell.state.exploded ? 'exploded' : 'cleared'\n            } else {\n                return cell.state.marker === Marker.Mine ? 'mine' : 'covered'\n            }\n        });\n\n        // apply defaults\n        stats = {\n            exploded: 0,\n            cleared: 0,\n            mine: 0,\n            covered: 0,\n            ...stats\n        };\n\n        let status: GameStatus;\n        if (stats.exploded > 0) {\n            status = GameStatus.Lose\n        } else if (stats.mine === this.state.numMines && stats.covered === 0) {\n            status = GameStatus.Win\n        } else {\n            status = GameStatus.InProgress\n        }\n\n        return {\n            numMines: this.state.numMines,\n            numExploded: stats.exploded,\n            numMarkedMines: stats.mine,\n            status: status\n        }\n    }\n\n    toJSON(): GameStateFields {\n        return this.state.toJSON()\n    }\n\n    neighborCoords(row: number, column: number): Coord[] {\n        const neighborOffsets: Coord[] = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n        return neighborOffsets.map(([dr, dc]) => [dr + row, dc + column] as Coord)\n            .filter(([r, c]) => r >= 0 && r < this.numRows && c >= 0 && c < this.numColumns)\n    }\n\n    neighbors(row: number, column: number): [Coord, CellState][] {\n        return this.neighborCoords(row, column).map(([r, c]) => [[r, c], this.cellState(r, c)])\n    }\n\n    cellState(row: number, column: number): CellState {\n        return this.cell(row, column).state\n    }\n\n    clearCell(row: number, column: number): MinesweeperGame {\n        const oldCell = this.cell(row, column);\n        if (isExposed(oldCell.state)) {\n            return this\n        }\n\n        // Allocate mines if this is the first cell being cleared\n        if (!this.state.minesAllocated) {\n            // Make it so initial cleared cell is in an open area\n            const noMineCoords = this.neighborCoords(row, column).concat([[row, column]]);\n            const noMineIndexes = noMineCoords.map(([r, c]) => this.getIndex(r, c));\n            const potentialMineLocations = _.difference(_.range(this.numRows * this.numColumns), noMineIndexes);\n            const mineLocations = new Set(_.sampleSize(potentialMineLocations, this.state.numMines));\n\n            const cells = this.state.cells.map((cell, i) => cell.set('hasMine', mineLocations.has(i)));\n            const newGame = new MinesweeperGame(this.state.merge({cells, minesAllocated: true}));\n            return newGame.clearCell(row, column)\n        }\n\n        const newCell = oldCell.set('state', this.getClearedCellState(row, column));\n        return this.setCell(row, column, newCell);\n    }\n\n    clearNeighbors(row: number, column: number): MinesweeperGame {\n        let cell = this.cell(row, column)\n        if (!isExposed(cell.state) || cell.state.exploded) {\n            return this\n        }\n\n        let numMarkedNeighbors = this.neighbors(row, column)\n            .filter(([_, c]) => c.kind === 'covered' && c.marker === Marker.Mine).length;\n        if (numMarkedNeighbors !== cell.state.numMinesNearby) {\n            return this\n        }\n\n        const indexesToClear: Set<number> = new Set(this.neighbors(row, column)\n            .filter(([_, c]) => c.kind === 'covered' && c.marker !== Marker.Mine)\n            .map(([[r, c], _]) => this.getIndex(r, c)));\n\n        const indexToCoord = (index: number): Coord => {\n            return [Math.floor(index / this.numColumns), index % this.numColumns]\n        }\n\n        const newCells = this.state.cells.withMutations(cells => {\n            while (indexesToClear.size > 0) {\n                let index = indexesToClear.values().next().value\n                indexesToClear.delete(index)\n\n                const [row, column] = indexToCoord(index)\n                const cellState = this.getClearedCellState(row, column)\n                cells = cells.set(index, cells.get(index)!.set('state', cellState))\n\n                if (cellState.kind === 'exposed' && !cellState.exploded && cellState.numMinesNearby === 0) {\n                    for (const coord of this.neighborCoords(row, column)) {\n                        const ncell = cells.get(this.getIndex(coord[0], coord[1]))!.state\n                        if (ncell.kind === 'covered') {\n                            indexesToClear.add(this.getIndex(coord[0], coord[1]))\n                        }\n                    }\n                }\n            }\n        })\n\n        return new MinesweeperGame(this.state.set('cells', newCells))\n    }\n\n    markCell(row: number, column: number, marker?: Marker): MinesweeperGame {\n        const oldCell = this.cell(row, column);\n        if (isExposed(oldCell.state)) {\n            throw Error(`Can't mark exposed cell: {row: ${row}, col: ${column}}`)\n        }\n\n        const newCell = oldCell.setIn(['state', 'marker'], marker);\n        return this.setCell(row, column, newCell)\n    }\n\n    private getIndex(row: number, column: number): number {\n        return row * this.numColumns + column\n    }\n\n    private validateCoord(row: number, column: number) {\n        if (row < 0 || row >= this.numRows || column < 0 || column >= this.numColumns) {\n            throw Error(`{row: ${row}, col: ${column}} out of bounds.  numRows: ${this.numRows}, numColumns: ${this.numColumns}`)\n        }\n    }\n\n    private getClearedCellState(row: number, column: number): CellState {\n        let numMinesNearby = this.neighborCoords(row, column).filter(([r, c]) => this.cell(r, c).hasMine).length;\n        return ExposedCellState({\n            exploded: this.cell(row, column).hasMine,\n            numMinesNearby\n        })\n    }\n\n    private cell(row: number, column: number): RecordOf<Cell> {\n        this.validateCoord(row, column);\n        const cell = this.state.cells.get(this.getIndex(row, column));\n        if (cell) {\n            return cell\n        }\n        throw Error(`(${row}, ${column}) out of bounds`)\n    }\n\n    private setCell(row: number, column: number, newCell: RecordOf<Cell>): MinesweeperGame {\n        const newCells = this.state.cells.set(this.getIndex(row, column), newCell);\n        return new MinesweeperGame(this.state.set('cells', newCells))\n    }\n}\n","import React from 'react';\nimport styles from './App.module.css';\nimport * as msg from './game/minesweeper-game';\nimport {MinesweeperBoard} from './MinesweeperBoard'\n\nenum CommandType {\n    Clear,\n    ClearNeighbors,\n    MarkMine,\n    MarkMaybe\n}\n\ninterface AppProps {\n    name: string\n}\n\ninterface AppState {\n    numRows: number,\n    numColumns: number,\n    numMines: number,\n    game: msg.MinesweeperGame\n    history: msg.MinesweeperGame[]\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        const\n            numRows = 16,\n            numColumns = 30,\n            numMines = 100;\n        const game = new msg.MinesweeperGame(numRows, numColumns, numMines);\n\n        this.state = {numRows, numColumns, numMines, game, history: []};\n        this.handleCellClick = this.handleCellClick.bind(this)\n    }\n\n    handleCellClick(row: number, column: number, event: React.MouseEvent) {\n        // event object will get modified after handler returns, so don't try to access it in the setState handler,\n        // since that might execute after this method returns.\n        let command = CommandType.Clear;\n        if (event.button === 2 || event.ctrlKey) {\n            command = CommandType.MarkMine\n        } else if (event.altKey) {\n            command = CommandType.MarkMaybe\n        }\n\n        this.setState(state => {\n            const game = state.game;\n            if (game.gameInfo.status !== msg.GameStatus.InProgress) {\n                return\n            }\n            const cell = game.cellState(row, column);\n            let newGame = game;\n\n            if (cell.kind === 'exposed' && command === CommandType.Clear) {\n                command = CommandType.ClearNeighbors\n            }\n\n            switch (command) {\n                case CommandType.Clear:\n                    newGame = game.clearCell(row, column);\n                    let newCell = newGame.cellState(row, column);\n                    if (newCell.kind === 'exposed' && newCell.numMinesNearby === 0) {\n                        newGame = newGame.clearNeighbors(row, column)\n                    }\n                    break;\n                case CommandType.MarkMine:\n                case CommandType.MarkMaybe: {\n                    if (cell.kind === 'covered') {\n                        const marker = command === CommandType.MarkMaybe ? msg.Marker.Maybe : msg.Marker.Mine;\n                        newGame = game.markCell(row, column, cell.marker === marker ? undefined : marker);\n                    }\n                    break\n                }\n                case CommandType.ClearNeighbors: {\n                    newGame = game.clearNeighbors(row, column);\n                    break\n                }\n                default:\n                    throw Error(`Unexpected command: ${command}`)\n            }\n\n            return {...state, game: newGame, history: [...state.history, game]}\n        })\n    }\n\n    newGame() {\n        this.setState(state => ({\n            ...state,\n            game: new msg.MinesweeperGame(state.numRows, state.numColumns, state.numMines),\n            history: []\n        }))\n    }\n\n    undoMove() {\n        if (this.state.history.length > 0) {\n            this.setState(state => ({\n                game: state.history[state.history.length - 1],\n                history: state.history.slice(0, state.history.length - 1)\n            }))\n        }\n    }\n\n    /**\n     * Returns an onChange handler for an input element, which updates a state field with the element's current value.\n     *\n     * @param field The name of the state field to update\n     * @param converter A callable which will be called with the element's value to convert it before storing it in\n     *   state.\n     */\n    linkStateHandler(field: string, converter: (value: string) => any = String) {\n        return (event: React.ChangeEvent<HTMLInputElement>) => {\n            const value = converter(event.target.value);\n            this.setState(state => ({...state, [field]: value}))\n        }\n    }\n\n    render() {\n        const info = this.state.game.gameInfo;\n        let statusMsg;\n        switch (info.status) {\n            case msg.GameStatus.InProgress:\n                statusMsg = 'In Progress';\n                break;\n            case msg.GameStatus.Lose:\n                statusMsg = 'You lose! :(';\n                break;\n            case msg.GameStatus.Win:\n                statusMsg = 'You win! :)';\n                break\n        }\n        return (\n            <div className={styles.app}>\n                <h1>{this.props.name}</h1>\n                <ul>\n                    <li>Click a covered cell to clear it</li>\n                    <li>Click a cleared cell to clear neighbors of cleared cell</li>\n                    <li>Right-click or Ctrl-click to mark a cell as a mine</li>\n                    <li>Alt-click or Option-click to mark a cell with ?</li>\n                </ul>\n                <div className={styles.gameConfig}>\n                    <label htmlFor=\"num-rows\">Number of rows: </label>\n                    <input type=\"number\"\n                           className={styles.numberInput}\n                           value={this.state.numRows}\n                           onChange={this.linkStateHandler('numRows', Number)}\n                           id=\"num-rows\"/>\n\n                    <label htmlFor=\"num-columns\">Number of columns: </label>\n                    <input type=\"number\"\n                           className={styles.numberInput}\n                           value={this.state.numColumns}\n                           onChange={this.linkStateHandler('numColumns', Number)}\n                           id=\"num-columns\"/>\n\n                    <label htmlFor=\"num-mines\">Number of mines: </label>\n                    <input type=\"number\"\n                           className={styles.numberInput}\n                           value={this.state.numMines}\n                           onChange={this.linkStateHandler('numMines', Number)}\n                           id=\"num-mines\"/>\n                </div>\n                <div style={{marginBottom: '5px'}}>\n                    Status: {statusMsg}\n                </div>\n                <div style={{marginBottom: '5px'}}>\n                    Mines left: {info.numMines - info.numMarkedMines}\n                    <button onClick={() => this.newGame()} style={{marginLeft: '10px'}}>New Game</button>\n                    <button onClick={() => this.undoMove()} style={{marginLeft: '10px'}}>Undo</button>\n                </div>\n                <MinesweeperBoard game={this.state.game} handleCellClick={this.handleCellClick}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport * as msg from './game/minesweeper-game';\nimport styles from './MinesweeperBoard.module.css';\nimport mine_icon from './mine.svg';\nimport flag_icon from './flag.svg';\n\ninterface CellProps {\n    cell: msg.CellState\n    row: number\n    column: number\n    handleCellClick(row: number, column: number, event: React.MouseEvent): void\n}\n\nclass Cell extends React.PureComponent<CellProps> {\n    onClick(event: React.MouseEvent) {\n        if (event.ctrlKey) {\n            // In this case, onRightClick will have already handled the event.  In Safari though, both handlers get\n            // called\n            return\n        }\n        this.props.handleCellClick(this.props.row, this.props.column, event)\n    }\n\n    onRightClick(event: React.MouseEvent) {\n        // prevent context menu from appearing\n        event.preventDefault();\n        this.props.handleCellClick(this.props.row, this.props.column, event)\n    }\n\n    render() {\n        const cell = this.props.cell;\n        let content: any = ' ';\n        const cssClasses = [styles.cell];\n\n        if (msg.isExposed(cell)) {\n            if (cell.exploded) {\n                cssClasses.push(styles.cellExploded);\n                content = <img src={mine_icon} alt={'mine'}/>;\n            } else {\n                cssClasses.push(styles.cellExposed);\n                const num = cell.numMinesNearby;\n                if (num !== 0) {\n                    content = `${num}`\n                }\n            }\n        } else {\n            switch (cell.marker) {\n                case msg.Marker.Mine:\n                    content = <img src={flag_icon} alt={'flag'}/>;\n                    break;\n                case msg.Marker.Maybe:\n                    content = '?';\n                    break;\n            }\n        }\n\n        return (\n            <button className={cssClasses.join(' ')}\n                    onClick={event => this.onClick(event)}\n                    onContextMenu={event => this.onRightClick(event)}\n            >\n                {content}\n            </button>\n        )\n    }\n}\n\ninterface MinesweeperBoardProps {\n    game: msg.MinesweeperGame\n    handleCellClick(row: number, column: number, event: React.MouseEvent): void\n}\n\nexport class MinesweeperBoard extends React.PureComponent<MinesweeperBoardProps> {\n    renderCell(row: number, column: number) {\n        return (\n            <Cell key={`${row}_${column}`}\n                  cell={this.props.game.cellState(row, column)}\n                  row={row}\n                  column={column}\n                  handleCellClick={this.props.handleCellClick}\n            />\n        )\n    }\n\n    render() {\n        const game = this.props.game;\n        const rows = [];\n\n        for (let rowNum = 0; rowNum < game.numRows; rowNum++) {\n            const row = [];\n            for (let colNum = 0; colNum < game.numColumns; colNum++) {\n                row[colNum] = this.renderCell(rowNum, colNum)\n            }\n            rows[rowNum] = (<div key={rowNum} className={styles.boardRow}>{row}</div>)\n        }\n\n        return (\n            <div className={styles.board}>\n                {rows}\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App name=\"Minesweeper\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"gameConfig\":\"App_gameConfig__2Ko4Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"MinesweeperBoard_cell__1S_DF\",\"cellExposed\":\"MinesweeperBoard_cellExposed__tBCu7\",\"cellExploded\":\"MinesweeperBoard_cellExploded__3ofE_\",\"boardRow\":\"MinesweeperBoard_boardRow__uP-Eo\",\"board\":\"MinesweeperBoard_board__30y8x\"};"],"sourceRoot":""}